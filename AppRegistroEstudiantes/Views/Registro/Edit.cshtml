@model AppRegistroEstudiantes.Models.Registro

@{
    ViewBag.Title = "Registro - Editar";
}

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "formEditRegistro" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal" id="context">
        <h4>{{title}}</h4>
        <hr />
        <div class="card">
            <div class="card-header">
                @Html.ActionLink("Volver Atrás", "Index", "Registro", null, new { @class = "btn btn-secondary mr-1" })
                <input id="btnActualizar" type="submit" value="Actualizar" class="btn btn-primary" />
            </div>
            <div class="card-body">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)
                <div class="form-row">
                    <div class="form-group col-md-3">
                        @Html.LabelFor(model => model.AlumnoID, "Alumno", htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownList("AlumnoID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.AlumnoID, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-2">
                        @Html.LabelFor(model => model.CursoID, "Curso", htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownList("CursoID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CursoID, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-2">
                        @Html.LabelFor(model => model.FechaInscripcion, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.FechaInscripcion, new { htmlAttributes = new { @class = "form-control", @Value = Model.FechaInscripcion.ToString("yyyy-MM-dd") } })
                        @Html.ValidationMessageFor(model => model.FechaInscripcion, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-2">
                        @Html.LabelFor(model => model.Matricula, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Matricula, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Matricula, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-2">
                        @Html.LabelFor(model => model.Beca, htmlAttributes: new { @class = "control-label" })
                        <input class="form-control"
                               id="Beca"
                               min="0"
                               name="Beca"
                               step="0.01"
                               type="number"
                               v-model="Beca.value"
                               v-bind:disabled="Beca.disabled">
                        @Html.ValidationMessageFor(model => model.Beca, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-3">
                        @Html.LabelFor(model => model.Observacion1, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Observacion1, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Observacion1, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-3">
                        @Html.LabelFor(model => model.Observacion2, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Observacion2, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Observacion2, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-1 text-center">
                        @Html.LabelFor(model => model.EsTraspaso, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.EsTraspaso)
                        @Html.ValidationMessageFor(model => model.EsTraspaso, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-1 text-center">
                        @Html.LabelFor(model => model.EsBecado, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.EsBecado, new
                        {
                            htmlAttributes = new Dictionary<string, object> {
                            { "v-model", "esBecado" },
                            { "@change", "switchDisableInputBeca" },
                        }
                        })
                        @Html.ValidationMessageFor(model => model.EsBecado, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-1 text-center">
                        @Html.LabelFor(model => model.EsRepitente, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.EsRepitente)
                        @Html.ValidationMessageFor(model => model.EsRepitente, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-1 text-center">
                        @*@Html.LabelFor(model => model.Estado, htmlAttributes: new { @class = "control-label" })*@
                        <div>
                            @Html.EditorFor(model => model.Estado, new { htmlAttributes = new { @class = "d-none" } })
                            @Html.ValidationMessageFor(model => model.Estado, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">
        Vue.createApp({
            setup() {
                const title = 'Editar Registro';
                const Beca = Vue.reactive({
                    value: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Beca,
Newtonsoft.Json.Formatting.Indented)),
                    disabled: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(!Model.EsBecado,
Newtonsoft.Json.Formatting.Indented)),
                });
                const esBecado = Vue.ref(@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.EsBecado,
Newtonsoft.Json.Formatting.Indented)));
                const switchDisableInputBeca = () => {
                    Beca.disabled = !esBecado.value;
                    Beca.value = 0;
                };
                return {
                    title,
                    Beca,
                    esBecado,
                    switchDisableInputBeca
                };
            }
        }).mount('#context');
</script>
}
